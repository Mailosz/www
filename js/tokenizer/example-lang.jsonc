{
	/* State name */
	"default-state":{ 
		/* defines when the state begins */
		"begin": {
			/* name of the state on which to test for this rule */
			"on": "second-state",
			/* when this token is encountered this state is chosen */
			"by": "goto default"
		},
		/* this state is the default one (there can only be one; if no state has "default": true, then the first one is default) */
		"default": true,
		/* allowed only in the default state - sets the variables at the start of tokenization */
		"init": {
			"variable-one": false,
			"variable-two": false,
			"variable-thre": false,
			"variable-four": false,
			"variable-five": false,
		},
		/* when the state is chosen these variables are set, and can later be used in conditional begins ("when" rule) */
		"set": {
			"variable-one": false,
			"@push:variable-two": "string-value", /* stacks the value so that it hides - but not removes - any previous ones, and can be later popped */
			"variable-three": "@stateName", /* assigns to the variable the state name - that is in this example: "default-state" */
			"variable-four": "@@this variable starts with @",
			"variable-five:queue": "@@this variable starts with @" /* queues value so that it hides - but not removes - any previous ones, and can be later shifted back */
		},

		/* "data" is not used by the tokenizing engine, but the values here are present for other code */
		"data": {
			"description": "this value can be anything"
		},
		/* executed at the end - just before new state is selected */
		"after": {
			"by": ["text", "abcd"], // when token content is equal to one of the specified values
			"set": {
				"variable-four": "@tokenContent", /* assigns to the variable the token content - the parsed text from the beginning of a state to its end */
				"variable-three": "@pop", /* removes a value from the stack */
				"variable-five": "@dequeue" /* removes a value from the queue */
			}
		}
	},
	/* this is other state's definition  */
	"other-state": {
		/* array means that there are many rules on when to start this state */
		"begin": [{
			/* array means this rule works on multiple states */
			"on": ["default-state", "second-state"],
			/* array means that when any of these tokens is encountered then this state is chosen (longer tokens are checked first) */
			"by": ["goto 1", "goto one"],
			/* "set"" inside a begin rule means, that these variables will be set only if this particular rule is used to start the state */
			"set": {
				"variable-one": {"f": "beginContent"} /* available in begin - assigns to the variable the parsed text that matched the element begin */
			}
		},{
			/* this value must be set to true if there is no "on" value - this means that this begin is checked for every other state */
			"everywhere": true,
			"by": ["goto other"],
			/* "data" inside a begin rule means, that these variables will be set only if this particular rule is used to start the state */
			"data": {
				"other": true
			}
		}]
	},
	"second-state": {
		"begin": [{
				/* longer tokens are evaluated first, so this will have precedence over "goto-1" */
				"on": "other-state",
				"by": "goto 1+1"
			},{
				/* no "by" value means that this state immediately follows the other-state (unless token belonging to other rule is found) */
				"on": "default-state",
				/* this overrides the prcedence of longest-tokens-first - rule with highest importance is checked first (defaults to 0, when not present)*/
				"importance": 5
			},{
				"on": "other-state",
				/* when checks variables set by "set" and only changes state if their values coresponds to these */
				"when": {
					/* only when variable-four = true */
					"variable-four": true,
					/* this is AND so both checks must be fullfilled */
					"variable-one": "green",
					"variable-three": ["green", true, "blue"], /* matches if variable-three is ANY of these values*/
					"@not:variable-two": "green" /* matches when variable-two is NOT "green" */
				},
				"set": {
					"number": false
				}
			}
		],
		/* state-parent is parent of this state - this means that it inherits all its properties (like "data" and "set") except "begin" */
		"parent": "state-parent",
		
		"data": {
			"color": "blue"
		}
	},
	"state-parent": {
		"after": {
			"func": "console.log('state changed');"
		}
	},
	"state-group": {
		/* this state groups "other-state" and "default-state" - this means that every rule with "on": "state-group" will work on these states */
		"group": ["other-state", "default-state"]
	}
}